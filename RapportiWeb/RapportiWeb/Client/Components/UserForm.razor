@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using RapportiWeb.Client.Services.Auth;

@inject IClientiService ClientiService
@inject IAuthService AuthService
@inject IDialogService DialogService
@inject NavigationManager nav


<MudPaper Class="pa-6" Elevation="12">
    <MudForm @ref="form" Model="User" @bind-IsValid="@success">
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12">

                <MudItem xs="12" sm="12" md="12">
                    <MudAutocomplete For="@(()=> Cliente.ragioneSociale)" @bind-Value="Cliente.ragioneSociale" Required="true" RequiredError="Selezionare un cliente" T="string" Label="Cliente" SearchFunc="Search" ShowProgressIndicator="true">
                        <ProgressIndicatorTemplate>
                            <MudProgressLinear Size="Size.Small" Indeterminate="true" Color="Color.Primary" />
                        </ProgressIndicatorTemplate>
                    </MudAutocomplete>
                </MudItem>

                <MudTextField @bind-Value="User.Nome" T="string" Label="Nome" Required="true" RequiredError="Nome obbligatorio!" />
                <MudTextField @bind-Value="User.Cognome" T="string" Label="Cognome" Required="true" RequiredError="Cognome obbligatorio!" />
                <MudTextField @bind-Value="User.UserName" T="string" Label="Username" Required="true" RequiredError="Username obbligatorio!" />


                <MudTextField T="string" Label="Password" @ref="pwField1"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                              RequiredError="Password obblligatoria!" />
                <MudTextField T="string"
                @bind-Value="User.Password"
                              Label="Password" InputType="InputType.Password"
                              Validation="@(new Func<string, string>(PasswordMatch))" />
            </MudItem>

            <MudItem xs="12" md="6">
                <MudSelect Required="true" RequiredError="Selezionare la tipologia dell'utente" For="@(()=> User.TipoUtente)" @bind-Value="User.TipoUtente" T="string" Label="Tipologia Utente" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value="@("Tecnico")" />
                    <MudSelectItem Value="@("Cliente")" />
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="6" Style="display:flex; justify-content:start; align-items:end;">
                <MudSwitch @bind-Checked="User.Amministratore" LabelPosition="LabelPosition.Start" Label="Amministratore:" Color="Color.Primary" />
            </MudItem>



            <MudItem xs="12">
                <MudText Style="padding-top:2%;">Figura professionale richiesta:</MudText>
                @if (User.TipoUtente == "Tecnico")
                {
                    <MudRadioGroup Disabled="false" Required="true" For="@(()=> User.Figuraprof)" @bind-SelectedOption="User.Figuraprof">
                        <MudRadio Color="Color.Primary" Option="@("Sistemista Senior/Tecnico ERP")">Sistemista Senior/Tecnico ERP</MudRadio>
                        <MudRadio Color="Color.Primary" Option="@("Consulente Applicativo Senior")">Consulente Applicativo Senior</MudRadio>
                        <MudRadio Color="Color.Primary" Option="@("Consulente Master")">Consulente Master</MudRadio>
                        <MudRadio Color="Color.Primary" Option="@("Project Manager")">Project Manager</MudRadio>
                    </MudRadioGroup>
                }
                else
                {
                    <MudRadioGroup Disabled="true" Required="false" For="@(()=> User.Figuraprof)">
                        <MudRadio Color="Color.Primary" Option="@("Sistemista Senior/Tecnico ERP")">Sistemista Senior/Tecnico ERP</MudRadio>
                        <MudRadio Color="Color.Primary" Option="@("Consulente Applicativo Senior")">Consulente Applicativo Senior</MudRadio>
                        <MudRadio Color="Color.Primary" Option="@("Consulente Master")">Consulente Master</MudRadio>
                        <MudRadio Color="Color.Primary" Option="@("Project Manager")">Project Manager</MudRadio>
                    </MudRadioGroup>
                }
            </MudItem>

            <MudItem xs="12">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(()=>{Back.InvokeAsync();})">Annulla</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(async ()=>{await AddUser(User);})">Crea utente</MudButton>
            </MudItem>

        </MudGrid>
    </MudForm>
</MudPaper>



@code {

    [Parameter]
    public bool Edit { get; set; } = false;

    [Parameter]
    public EventCallback<UserRegistration> CreateUser { get; set; }

    [Parameter]
    public EventCallback Back { get; set; }

    [Parameter]
    public UserRegistration User { get; set; } = new UserRegistration();

    public Cliente Cliente { get; set; } = new Cliente();
    public string ErrorMessage { get; set; } = string.Empty;
    public List<Cliente> ListaClienti { get; set; } = new List<Cliente>();

    //int AdminSwitch = 0;
    bool ClienteSwitch = true;
    bool TecnicoSwitch = false;



    MudTextField<string> pwField1;
    bool success;
    MudForm form;

    protected override async Task OnInitializedAsync()
    {
        ListaClienti = await ClientiService.GetClienti();
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }

    private async Task AddUser(UserRegistration user)
    {
        await form.Validate();

        var cliente = ListaClienti.FirstOrDefault(c => c.ragioneSociale == Cliente.ragioneSociale);

        try
        {
            if (user != null && cliente != null)
            {
                user.ClienteId = cliente.id;

                var res = await AuthService.Register(user, cliente);
                await OpenDialog(user, res.Message, Color.Success);
            }
        }
        catch
        {
            Console.WriteLine("WOOPS");
        }
    }

    private async Task<IEnumerable<string>> Search(string value)
    {
        string[] ArrClienti = await ClientiService.GetArrayClienti();

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return ArrClienti;
        return ArrClienti.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }


    private async Task OpenDialog(UserRegistration user, string text, Color color)
    {
        var parameters = new DialogParameters<Dialog>();
        parameters.Add(x => x.ContentText, text);
        parameters.Add(x => x.ButtonText, "CHIUDI");
        parameters.Add(x => x.Color, color);


        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<Dialog>("ATTENZIONE", parameters, options);
        var result = await dialog.Result;

    }


}